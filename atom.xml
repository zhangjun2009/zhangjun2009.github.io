<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我就是我,不一样的自我.</title>
  
  <subtitle>一个搬不动代码的程序员</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangjun2009.github.io/"/>
  <updated>2019-06-15T12:44:30.174Z</updated>
  <id>https://zhangjun2009.github.io/</id>
  
  <author>
    <name>张 军</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>冒泡排序</title>
    <link href="https://zhangjun2009.github.io/2019/06/15/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>https://zhangjun2009.github.io/2019/06/15/冒泡排序/</id>
    <published>2019-06-15T11:43:51.042Z</published>
    <updated>2019-06-15T12:44:30.174Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;冒泡排序会遍历若干次要排序的队列,每次排序时,从前往后依次比较相邻两个数的大小,如果前者比后者大,则交换它们的位置,这样一次遍历之后最大的元素就在队列末尾了,采用相同的方法再次遍历,第二大元素被排在最大元素前面,重复以上操作,直到整个队列都有序为止.<br>下面以数组{20,40,30,10,60,50}为例，演示它的冒泡排序过程(如下图)。<br><img src="/2019/06/15/冒泡排序/1.jpg" alt="冒泡排序"><br>冒泡排序的时间复杂度为O(N2)<br><a href="https://github.com/zhangjun2009/ymm/blob/master/src/main/java/com/zhangj/ymm/data_struct/BubbleSort.java" target="_blank" rel="noopener">冒泡排序java实现</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;冒泡排序会遍历若干次要排序的队列,每次排序时,从前往后依次比较相邻两个数的大小,如果前者比后者大,则交换它们的位置,这样一次遍历之后最大的元素就在队列末尾了,采用相同的方法再次遍历,第二大元素被排在最大元素前面,重复以上操作,
      
    
    </summary>
    
      <category term="排序" scheme="https://zhangjun2009.github.io/categories/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="冒泡排序" scheme="https://zhangjun2009.github.io/tags/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>红黑树</title>
    <link href="https://zhangjun2009.github.io/2019/06/15/RB%E6%A0%91/"/>
    <id>https://zhangjun2009.github.io/2019/06/15/RB树/</id>
    <published>2019-06-15T02:14:37.548Z</published>
    <updated>2019-06-15T11:38:30.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="红黑树的介绍"><a href="#红黑树的介绍" class="headerlink" title="红黑树的介绍"></a>红黑树的介绍</h1><p>&ensp;&ensp;&ensp;&ensp;红黑树是一种特殊的二叉查找树,每个节点的颜色可以是红色或者黑色.<br>特征:</p><ol><li>每个节点是红色或者黑色</li><li>根节点是黑色</li><li>每个叶子节点是黑色,这里的叶子节点指的是为空的叶子节点</li><li>如果一个节点的颜色为红色,则他的子节点必须为黑色</li><li>从一个节点到该节点的子孙节点的所有路径上包含相同数量的黑色节点<br>红黑树示意图:<br><img src="/2019/06/15/RB树/1.jpg" alt="红黑树"></li></ol><p>红黑树的所有操作时间复杂度为:O(lgn)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;红黑树的介绍&quot;&gt;&lt;a href=&quot;#红黑树的介绍&quot; class=&quot;headerlink&quot; title=&quot;红黑树的介绍&quot;&gt;&lt;/a&gt;红黑树的介绍&lt;/h1&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;红黑树是一种特殊的二叉查找树,每个节点的颜色可以是红色或者黑
      
    
    </summary>
    
      <category term="数据结构" scheme="https://zhangjun2009.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="红黑树" scheme="https://zhangjun2009.github.io/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>平衡二叉树AVL</title>
    <link href="https://zhangjun2009.github.io/2019/06/14/AVL/"/>
    <id>https://zhangjun2009.github.io/2019/06/14/AVL/</id>
    <published>2019-06-14T02:48:05.721Z</published>
    <updated>2019-06-15T09:11:33.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AVL树的介绍"><a href="#AVL树的介绍" class="headerlink" title="AVL树的介绍"></a>AVL树的介绍</h1><p>&ensp;&ensp;&ensp;&ensp;AVL树是一种二叉树,它的特点是树中任意节点的两个子树的高度之差不大于1.<br><img src="/2019/06/14/AVL/1.jpg" alt="enter description here"><br>&ensp;&ensp;&ensp;&ensp;图中左边是AVL树,右边不是AVL树,因为右边树节点7的两个子树高度差为2,<br>查找、插入和删除在平均和最坏情况下都是O（log n）。增加和删除可能需要通过一次或多次树旋转来重新平衡这个树。</p><h1 id="AVL树的旋转"><a href="#AVL树的旋转" class="headerlink" title="AVL树的旋转"></a>AVL树的旋转</h1><p>&ensp;&ensp;&ensp;&ensp;在AVL树种进行节点的新增,删除,可能导致AVL树的某个节点的两个子树的高度差大于1,破坏了AVL树的平衡.破坏平衡的方式有四种:LL(左左),LR(左右),RR(右右),RL(右左),下面是示意图:<br><img src="/2019/06/14/AVL/2.jpg" alt="enter description here"><br><img src="/2019/06/14/AVL/3.jpg" alt="enter description here"><br>(1)<strong>LL</strong>:插入或删除一个节点后,根节点的左子树的左子树还有非空的节点<br>(2)<strong>LR</strong>:插入或删除一个节点后,根节点的左子树的右子树还有非空节点<br>(3)<strong>RR</strong>:插入或删除一个节点后,根节点的右子树的右子树还有非空节点<br>(4)<strong>RL</strong>:插入或删除一个节点后,根节点的右子树的左子树还有非空节点</p><p>&ensp;&ensp;&ensp;&ensp;LL失去平衡的情况,可以通过一次旋转让AVL树恢复平衡.<br><img src="/2019/06/14/AVL/4.jpg" alt="enter description here"><br>由于是LL情况,就是用手抓住”左孩子”k1旋转,使k1称为根节点,k2变成k1的右子树,k1的右子树变成k2的左子树.<br>&ensp;&ensp;&ensp;&ensp;RR失去平衡的情况正好和LL对称.<br><img src="/2019/06/14/AVL/5.jpg" alt="enter description here"><br>&ensp;&ensp;&ensp;&ensp;LR失去平衡的情况,需要经过2次旋转才能让AVL树恢复.第一次围绕k1进行RR旋转,第二次围绕k3进行LL旋转.<br><img src="/2019/06/14/AVL/6.jpg" alt="enter description here"><br>&ensp;&ensp;&ensp;&ensp;RL和LR是对称的情况,其恢复的方法如下:第一次围绕k3进行LL旋转,第二次围绕k1进行RR旋转.<br><img src="/2019/06/14/AVL/7.jpg" alt="enter description here"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AVL树的介绍&quot;&gt;&lt;a href=&quot;#AVL树的介绍&quot; class=&quot;headerlink&quot; title=&quot;AVL树的介绍&quot;&gt;&lt;/a&gt;AVL树的介绍&lt;/h1&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;AVL树是一种二叉树,它的特点是树中任意节点的两个子
      
    
    </summary>
    
      <category term="数据结构" scheme="https://zhangjun2009.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="平衡二叉树AVL" scheme="https://zhangjun2009.github.io/tags/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91AVL/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="https://zhangjun2009.github.io/2019/06/10/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/"/>
    <id>https://zhangjun2009.github.io/2019/06/10/二叉查找树/</id>
    <published>2019-06-10T13:47:26.106Z</published>
    <updated>2019-06-15T09:04:57.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树的介绍"><a href="#树的介绍" class="headerlink" title="树的介绍"></a>树的介绍</h1><ol><li><p>树的定义<br>&ensp;&ensp;&ensp;&ensp;树是一种数据结构,它是由n(n&gt;=1)个有限节点组成的一个具有层次关系的集合.它具有一下特点:<br>(1):每个节点有零个或者多个子节点<br>(2):根节点没有父节点<br>(3):除了根节点外,其他节点都只有一个父节点<br>(4):除了根节点外,每个子节点可以分为多个不相交的子树</p></li><li><p>树的基本术语<br>“双亲”:若一个节点有子树,则该节点称为子树的根的”双亲”<br>“兄弟”:若双亲节点相同,则他们称为”兄弟”<br>“祖先”:从根节点到某个节点的路径上所以节点都是该节点的祖先<br>“节点的度”:子树的数量<br>“叶子节点”:节点的度为零的节点<br>“分支节点”:节点的度不为零的节点<br>“树的度”:树中节点的最大度<br>“层次”:根节点的层次为1,其余节点的层次等于该节点双亲节点的层次加1<br>“树的高度”:树中节点的最大层次<br>“节点的前驱”:该节点左子树中最大的节点<br>“节点的后继”:该节点右子树中最小的节点</p></li></ol><h2 id="二叉树的介绍"><a href="#二叉树的介绍" class="headerlink" title="二叉树的介绍"></a>二叉树的介绍</h2><ul><li><p>二叉树的定义<br>二叉树的节点最多只有2个子树,有五种形态:空二叉树,只有一个根节点,一个根节点和左子树,一个根节点和右子树,一个根节点和左右子树.</p><p><img src="/2019/06/10/二叉查找树/1.png" alt="enter description here"></p></li><li><p>二叉树的性质<br>(1):二叉树第i层上最多有2^(i-1) (i≥1)个节点<br>(2):深度为k的二叉树,最多有2^k - 1个节点<br>(3):拥有n个节点的二叉树,高度至少为log2 (n+1)<br>(4):度为0的节点个数A,度为2的节点个数B,A = B+1</p></li><li><p>满二叉树<br>定义:高度为h,且有2^h -1个节点的二叉树<br><img src="/2019/06/10/二叉查找树/2.jpg" alt="enter description here"></p></li><li><p>完全二叉树<br>定义: 一颗二叉树中只有最下面二层节点的度可以是2,并且最下面一层的叶子节点集中在左边,叶子节点只能出现在最下层和次下层,且最下层的叶子节点集中在树的左边.<br><img src="/2019/06/10/二叉查找树/3.jpg" alt="enter description here"></p></li><li><p>二叉查找树<br>定义:任意节点的左子树都小于等于该节点的值,右子树都大于等于该节点的值.<br><img src="/2019/06/10/二叉查找树/4.jpg" alt="enter description here"><br>在二叉查找树中:<br>(1):若任意节点的左子树不为空,则左子树上的所有节点的值都小于它根节点的值<br>(2):若任意节点的右子树不为空,则右子树上的所有节点的值都大于它根节点的值<br>(3):没有值相等的节点<br>二叉查找树的查询,新增,删除依赖于树的拓扑结构,最佳情况是O(log­2n)，而最坏情况是 O(n)。</p><p>二叉树的遍历:</p></li><li><p>前序遍历<br>若二叉树非空<br>(1):访问根节点<br>(2):先序遍历左子树<br>(3):先序遍历右子树</p></li><li><p>中序遍历<br>若二叉树非空<br>(1):中序遍历左子树<br>(2):访问根节点<br>(3):中序遍历右子树</p></li><li><p>后续遍历<br>若二叉树非空<br>(1):后序遍历左子树<br>(2):后序遍历右子树<br>(3):访问根节点</p><p>例子:<br><img src="/2019/06/10/二叉查找树/5.jpg" alt="enter description here"></p><p>(1):前序遍历结果:312546<br>(2):中序遍历结果:123456<br>(3):后序遍历结果:214653</p><p><a href="https://github.com/zhangjun2009/ymm/blob/master/src/main/java/com/zhangj/ymm/data_struct/BinarySearchTree.java" target="_blank" rel="noopener">二叉查找树java实现</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;树的介绍&quot;&gt;&lt;a href=&quot;#树的介绍&quot; class=&quot;headerlink&quot; title=&quot;树的介绍&quot;&gt;&lt;/a&gt;树的介绍&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;树的定义&lt;br&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;树是一种数据结构,它是由n(n&amp;gt;=1
      
    
    </summary>
    
      <category term="数据结构" scheme="https://zhangjun2009.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="二叉树" scheme="https://zhangjun2009.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>队列</title>
    <link href="https://zhangjun2009.github.io/2019/06/09/%E9%98%9F%E5%88%97/"/>
    <id>https://zhangjun2009.github.io/2019/06/09/队列/</id>
    <published>2019-06-09T14:56:44.160Z</published>
    <updated>2019-06-09T15:17:00.326Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;队列是一种线性存储结构,他是按照FIFO(first in first out)先进先出的方式来进出队列的,并且规定队列只能在队首进行删除操作,在队尾进行添加操作,分别称为”出队”和”入队”.<br><img src="/2019/06/09/队列/1.png" alt="enter description here"></p><p><a href="https://github.com/zhangjun2009/ymm/blob/master/src/main/java/com/zhangj/ymm/data_struct/ArrayQueue.java" target="_blank" rel="noopener">队列的java实现</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;队列是一种线性存储结构,他是按照FIFO(first in first out)先进先出的方式来进出队列的,并且规定队列只能在队首进行删除操作,在队尾进行添加操作,分别称为”出队”和”入队”.&lt;br&gt;&lt;img src=&quot;/20
      
    
    </summary>
    
      <category term="数据结构" scheme="https://zhangjun2009.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="队列" scheme="https://zhangjun2009.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>栈</title>
    <link href="https://zhangjun2009.github.io/2019/06/09/%E6%A0%88/"/>
    <id>https://zhangjun2009.github.io/2019/06/09/栈/</id>
    <published>2019-06-09T14:19:29.948Z</published>
    <updated>2019-06-09T14:54:16.060Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;栈是一种线性存储结构,按照后进先出(LIFO,last in first out)方式出入栈,栈的添加,删除操作只能在栈顶进行.<br>栈通常有三种操作:</p><ol><li>push-&gt;栈顶添加元素</li><li>peek-&gt;返回栈顶元素,不删除</li><li>pop-&gt;返回并删除栈顶元素<br><img src="/2019/06/09/栈/1.png" alt="enter description here"></li></ol><p><a href="https://github.com/zhangjun2009/ymm/blob/master/src/main/java/com/zhangj/ymm/data_struct/ArrayStack.java" target="_blank" rel="noopener">栈的java实现代码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;栈是一种线性存储结构,按照后进先出(LIFO,last in first out)方式出入栈,栈的添加,删除操作只能在栈顶进行.&lt;br&gt;栈通常有三种操作:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;push-&amp;gt;栈顶添加元素&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="数据结构" scheme="https://zhangjun2009.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="栈" scheme="https://zhangjun2009.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>线性数据结构</title>
    <link href="https://zhangjun2009.github.io/2019/06/09/%E6%95%B0%E7%BB%841/"/>
    <id>https://zhangjun2009.github.io/2019/06/09/数组1/</id>
    <published>2019-06-09T01:30:21.398Z</published>
    <updated>2019-06-09T03:57:25.580Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;数组属于线性表,它是具有相同类型的N个数据元素的有序组成,数组有上下界的,且上下界内的元素是连续的.<br><strong><em>数组的特点:数组里的元素是连续的,随机访问速度快.</em></strong><br><img src="/2019/06/09/数组1/1.png" alt="enterdescription here"> </p><p>&ensp;&ensp;&ensp;&ensp;双向链表也是由节点组成,每个节点包含该节点的值,直接前驱节点,直接后继节点,<br>单向链表,由节点组成,每个节点包括节点的值和指向下一节点的指针.<br><strong><em>单链表的特点:随机访问速度较慢,但是新增/删除的效率很高.</em></strong><br><img src="/2019/06/09/数组1/2.png" alt="enter description here"><br><img src="/2019/06/09/数组1/3.png" alt="enter description here"><br><img src="/2019/06/09/数组1/4.png" alt="enter description here"></p><p>&ensp;&ensp;&ensp;&ensp;双向链表也是由节点组成,每个节点包含该节点的值,直接前驱节点,直接后继节点,<br><img src="/2019/06/09/数组1/5.png" alt="enter description here"><br><img src="/2019/06/09/数组1/6.png" alt="enter description here"><br><img src="/2019/06/09/数组1/7.png" alt="enter description here"><br><a href="https://github.com/zhangjun2009/ymm/blob/master/src/main/java/com/zhangj/ymm/data_struct/DoubleLink.java" target="_blank" rel="noopener">双链表的java实现github地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;数组属于线性表,它是具有相同类型的N个数据元素的有序组成,数组有上下界的,且上下界内的元素是连续的.&lt;br&gt;&lt;strong&gt;&lt;em&gt;数组的特点:数组里的元素是连续的,随机访问速度快.&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;img
      
    
    </summary>
    
      <category term="数据结构" scheme="https://zhangjun2009.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://zhangjun2009.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础知识</title>
    <link href="https://zhangjun2009.github.io/2019/06/04/linux1/"/>
    <id>https://zhangjun2009.github.io/2019/06/04/linux1/</id>
    <published>2019-06-04T14:58:09.334Z</published>
    <updated>2019-06-04T15:53:21.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux下”-“和”-”的区别"><a href="#linux下”-“和”-”的区别" class="headerlink" title=" linux下”/“和”~”的区别"></a> <strong>linux下”/“和”~”的区别</strong></h2><blockquote><p> “/“是linux的根目录,”~”是linux的家目录.我们知道linux是个文件系统,一切皆文件,存储是以挂载的方式,硬盘是挂在文件上的,每个文件都有层级关系,就像一颗树一样,而”/“就是树的头.linux种每个用户都有”家目录”,如果我们新增用户test,则test用户的家目录就是/home/test,新增用户系统会自动帮我们创建好这个目录,特别提示,<strong><em>root用户的家目录是/root</em></strong></p></blockquote><h2 id="init-命令的使用"><a href="#init-命令的使用" class="headerlink" title="init 命令的使用"></a><strong>init 命令的使用</strong></h2><blockquote><p> <code>init 0</code>: <code>关机,停止所有进程</code><br>   <code>init 6</code>: <code>重启机器</code> </p></blockquote><h2 id="linux特殊符号"><a href="#linux特殊符号" class="headerlink" title="linux特殊符号"></a><strong>linux特殊符号</strong></h2><blockquote><ul><li><p><em>管道符号: “|”</em><br> 把前一个命令的输出结果给后一个命令执行,more/head/cat/grep/wc……等命令支持放在管道符号后面.<br>cat /etc/passwd | grep ‘root’ -&gt; 过滤出/etc/passwd中含有’root’的行</p></li><li><p><em>追加符号:”&gt;&gt;”</em><br> 把之前一个命令输出的结果追加到某个文件<br>head -3 /etc/passwd &gt;&gt; /tmp/test.md -&gt; 把/etc/passwd文件前3行追加到/tem/test.md文件结尾</p></li><li><p><em>覆盖符号:”&gt;”</em><br>把之前一个命令的输出结果覆盖到某个文件<br>head -3 /etc/passwd &gt; /tmp/test.md -&gt;用/etc/passwd文件前3行覆盖/tem/test.md文件内容</p></li><li><p>*连接符号:”; “<br>执行多个命令,并放在一行执行,命令之间用”; “隔开<br>mkdir /tmp/music ; mv /tmp/music /usr/local -&gt;创建文件music之后移动到/usr/local目录下</p></li><li><p><em>后台执行:”&amp;”</em><br>当要把命令放在后台执行时，在命令的后面加上“&amp;”</p></li><li><p><em>`command` 倒引号</em><br>倒引号里的命令要提前执行,执行的结果带入的后面的执行命令中</p></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;linux下”-“和”-”的区别&quot;&gt;&lt;a href=&quot;#linux下”-“和”-”的区别&quot; class=&quot;headerlink&quot; title=&quot; linux下”/“和”~”的区别&quot;&gt;&lt;/a&gt; &lt;strong&gt;linux下”/“和”~”的区别&lt;/strong&gt;&lt;/h
      
    
    </summary>
    
      <category term="linux" scheme="https://zhangjun2009.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://zhangjun2009.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhangjun2009.github.io/2019/06/01/hello-world/"/>
    <id>https://zhangjun2009.github.io/2019/06/01/hello-world/</id>
    <published>2019-06-01T07:44:03.493Z</published>
    <updated>2019-06-01T10:16:51.224Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="test" scheme="https://zhangjun2009.github.io/categories/test/"/>
    
    
      <category term="test" scheme="https://zhangjun2009.github.io/tags/test/"/>
    
  </entry>
  
</feed>
