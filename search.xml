<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[二叉树]]></title>
    <url>%2F2019%2F06%2F10%2F%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%2F</url>
    <content type="text"><![CDATA[树的介绍 树的定义&ensp;&ensp;&ensp;&ensp;树是一种数据结构,它是由n(n&gt;=1)个有限节点组成的一个具有层次关系的集合.它具有一下特点:(1):每个节点有零个或者多个子节点(2):根节点没有父节点(3):除了根节点外,其他节点都只有一个父节点(4):除了根节点外,每个子节点可以分为多个不相交的子树 树的基本术语“双亲”:若一个节点有子树,则该节点称为子树的根的”双亲”“兄弟”:若双亲节点相同,则他们称为”兄弟”“祖先”:从根节点到某个节点的路径上所以节点都是该节点的祖先“节点的度”:子树的数量“叶子节点”:节点的度为零的节点“分支节点”:节点的度不为零的节点“树的度”:树中节点的最大度“层次”:根节点的层次为1,其余节点的层次等于该节点双亲节点的层次加1“树的高度”:树中节点的最大层次“节点的前驱”:该节点左子树中最大的节点“节点的后继”:该节点右子树中最小的节点 二叉树的介绍 二叉树的定义二叉树的节点最多只有2个子树,有五种形态:空二叉树,只有一个根节点,一个根节点和左子树,一个根节点和右子树,一个根节点和左右子树. 二叉树的性质(1):二叉树第i层上最多有2^(i-1) (i≥1)个节点(2):深度为k的二叉树,最多有2^k - 1个节点(3):拥有n个节点的二叉树,高度至少为log2 (n+1)(4):度为0的节点个数A,度为2的节点个数B,A = B+1 满二叉树定义:高度为h,且有2^h -1个节点的二叉树 完全二叉树定义: 一颗二叉树中只有最下面二层节点的度可以是2,并且最下面一层的叶子节点集中在左边,叶子节点只能出现在最下层和次下层,且最下层的叶子节点集中在树的左边. 二叉查找树定义:任意节点的左子树都小于等于该节点的值,右子树都大于等于该节点的值. 在二叉查找树中:(1):若任意节点的左子树不为空,则左子树上的所有节点的值都小于它根节点的值(2):若任意节点的右子树不为空,则右子树上的所有节点的值都大于它根节点的值(3):没有值相等的节点 二叉树的遍历: 前序遍历若二叉树非空(1):访问根节点(2):先序遍历左子树(3):先序遍历右子树 中序遍历若二叉树非空(1):中序遍历左子树(2):访问根节点(3):中序遍历右子树 后续遍历若二叉树非空(1):后序遍历左子树(2):后序遍历右子树(3):访问根节点 例子: (1):前序遍历结果:312546 (2):中序遍历结果:123456 (3):后序遍历结果:214653 二叉查找树java实现]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[队列]]></title>
    <url>%2F2019%2F06%2F09%2F%E9%98%9F%E5%88%97%2F</url>
    <content type="text"><![CDATA[&ensp;&ensp;&ensp;&ensp;队列是一种线性存储结构,他是按照FIFO(first in first out)先进先出的方式来进出队列的,并且规定队列只能在队首进行删除操作,在队尾进行添加操作,分别称为”出队”和”入队”. 队列的java实现]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[栈]]></title>
    <url>%2F2019%2F06%2F09%2F%E6%A0%88%2F</url>
    <content type="text"><![CDATA[&ensp;&ensp;&ensp;&ensp;栈是一种线性存储结构,按照后进先出(LIFO,last in first out)方式出入栈,栈的添加,删除操作只能在栈顶进行.栈通常有三种操作: push-&gt;栈顶添加元素 peek-&gt;返回栈顶元素,不删除 pop-&gt;返回并删除栈顶元素 栈的java实现代码]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线性数据结构]]></title>
    <url>%2F2019%2F06%2F09%2F%E6%95%B0%E7%BB%841%2F</url>
    <content type="text"><![CDATA[&ensp;&ensp;&ensp;&ensp;数组属于线性表,它是具有相同类型的N个数据元素的有序组成,数组有上下界的,且上下界内的元素是连续的.数组的特点:数组里的元素是连续的,随机访问速度快. &ensp;&ensp;&ensp;&ensp;双向链表也是由节点组成,每个节点包含该节点的值,直接前驱节点,直接后继节点,单向链表,由节点组成,每个节点包括节点的值和指向下一节点的指针.单链表的特点:随机访问速度较慢,但是新增/删除的效率很高. &ensp;&ensp;&ensp;&ensp;双向链表也是由节点组成,每个节点包含该节点的值,直接前驱节点,直接后继节点,双链表的java实现github地址]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux基础知识]]></title>
    <url>%2F2019%2F06%2F04%2Flinux1%2F</url>
    <content type="text"><![CDATA[linux下”/“和”~”的区别 “/“是linux的根目录,”~”是linux的家目录.我们知道linux是个文件系统,一切皆文件,存储是以挂载的方式,硬盘是挂在文件上的,每个文件都有层级关系,就像一颗树一样,而”/“就是树的头.linux种每个用户都有”家目录”,如果我们新增用户test,则test用户的家目录就是/home/test,新增用户系统会自动帮我们创建好这个目录,特别提示,root用户的家目录是/root init 命令的使用 init 0: 关机,停止所有进程 init 6: 重启机器 linux特殊符号 管道符号: “|” 把前一个命令的输出结果给后一个命令执行,more/head/cat/grep/wc……等命令支持放在管道符号后面.cat /etc/passwd | grep ‘root’ -&gt; 过滤出/etc/passwd中含有’root’的行 追加符号:”&gt;&gt;” 把之前一个命令输出的结果追加到某个文件head -3 /etc/passwd &gt;&gt; /tmp/test.md -&gt; 把/etc/passwd文件前3行追加到/tem/test.md文件结尾 覆盖符号:”&gt;”把之前一个命令的输出结果覆盖到某个文件head -3 /etc/passwd &gt; /tmp/test.md -&gt;用/etc/passwd文件前3行覆盖/tem/test.md文件内容 *连接符号:”; “执行多个命令,并放在一行执行,命令之间用”; “隔开mkdir /tmp/music ; mv /tmp/music /usr/local -&gt;创建文件music之后移动到/usr/local目录下 后台执行:”&amp;”当要把命令放在后台执行时，在命令的后面加上“&amp;” `command` 倒引号倒引号里的命令要提前执行,执行的结果带入的后面的执行命令中]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F06%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
